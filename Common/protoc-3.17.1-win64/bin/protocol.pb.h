// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "enum.pb.h"
#include "struct.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protocol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protocol_2eproto;
namespace protocol {
class C_CONNECT;
struct C_CONNECTDefaultTypeInternal;
extern C_CONNECTDefaultTypeInternal _C_CONNECT_default_instance_;
class C_TURNEND;
struct C_TURNENDDefaultTypeInternal;
extern C_TURNENDDefaultTypeInternal _C_TURNEND_default_instance_;
class C_USECARD;
struct C_USECARDDefaultTypeInternal;
extern C_USECARDDefaultTypeInternal _C_USECARD_default_instance_;
class S_CONNECT;
struct S_CONNECTDefaultTypeInternal;
extern S_CONNECTDefaultTypeInternal _S_CONNECT_default_instance_;
class S_TURNEND;
struct S_TURNENDDefaultTypeInternal;
extern S_TURNENDDefaultTypeInternal _S_TURNEND_default_instance_;
class S_USECARD;
struct S_USECARDDefaultTypeInternal;
extern S_USECARDDefaultTypeInternal _S_USECARD_default_instance_;
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::protocol::C_CONNECT* Arena::CreateMaybeMessage<::protocol::C_CONNECT>(Arena*);
template<> ::protocol::C_TURNEND* Arena::CreateMaybeMessage<::protocol::C_TURNEND>(Arena*);
template<> ::protocol::C_USECARD* Arena::CreateMaybeMessage<::protocol::C_USECARD>(Arena*);
template<> ::protocol::S_CONNECT* Arena::CreateMaybeMessage<::protocol::S_CONNECT>(Arena*);
template<> ::protocol::S_TURNEND* Arena::CreateMaybeMessage<::protocol::S_TURNEND>(Arena*);
template<> ::protocol::S_USECARD* Arena::CreateMaybeMessage<::protocol::S_USECARD>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protocol {

// ===================================================================

class S_CONNECT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.S_CONNECT) */ {
 public:
  inline S_CONNECT() : S_CONNECT(nullptr) {}
  ~S_CONNECT() override;
  explicit constexpr S_CONNECT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_CONNECT(const S_CONNECT& from);
  S_CONNECT(S_CONNECT&& from) noexcept
    : S_CONNECT() {
    *this = ::std::move(from);
  }

  inline S_CONNECT& operator=(const S_CONNECT& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_CONNECT& operator=(S_CONNECT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_CONNECT& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_CONNECT* internal_default_instance() {
    return reinterpret_cast<const S_CONNECT*>(
               &_S_CONNECT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(S_CONNECT& a, S_CONNECT& b) {
    a.Swap(&b);
  }
  inline void Swap(S_CONNECT* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_CONNECT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_CONNECT* New() const final {
    return new S_CONNECT();
  }

  S_CONNECT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_CONNECT>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_CONNECT& from);
  void MergeFrom(const S_CONNECT& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_CONNECT* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.S_CONNECT";
  }
  protected:
  explicit S_CONNECT(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectFieldNumber = 1,
  };
  // bool connect = 1;
  void clear_connect();
  bool connect() const;
  void set_connect(bool value);
  private:
  bool _internal_connect() const;
  void _internal_set_connect(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.S_CONNECT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool connect_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class C_CONNECT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.C_CONNECT) */ {
 public:
  inline C_CONNECT() : C_CONNECT(nullptr) {}
  ~C_CONNECT() override;
  explicit constexpr C_CONNECT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_CONNECT(const C_CONNECT& from);
  C_CONNECT(C_CONNECT&& from) noexcept
    : C_CONNECT() {
    *this = ::std::move(from);
  }

  inline C_CONNECT& operator=(const C_CONNECT& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_CONNECT& operator=(C_CONNECT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_CONNECT& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_CONNECT* internal_default_instance() {
    return reinterpret_cast<const C_CONNECT*>(
               &_C_CONNECT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(C_CONNECT& a, C_CONNECT& b) {
    a.Swap(&b);
  }
  inline void Swap(C_CONNECT* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_CONNECT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_CONNECT* New() const final {
    return new C_CONNECT();
  }

  C_CONNECT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_CONNECT>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_CONNECT& from);
  void MergeFrom(const C_CONNECT& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_CONNECT* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.C_CONNECT";
  }
  protected:
  explicit C_CONNECT(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectFieldNumber = 1,
  };
  // bool connect = 1;
  void clear_connect();
  bool connect() const;
  void set_connect(bool value);
  private:
  bool _internal_connect() const;
  void _internal_set_connect(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.C_CONNECT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool connect_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class S_USECARD final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.S_USECARD) */ {
 public:
  inline S_USECARD() : S_USECARD(nullptr) {}
  ~S_USECARD() override;
  explicit constexpr S_USECARD(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_USECARD(const S_USECARD& from);
  S_USECARD(S_USECARD&& from) noexcept
    : S_USECARD() {
    *this = ::std::move(from);
  }

  inline S_USECARD& operator=(const S_USECARD& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_USECARD& operator=(S_USECARD&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_USECARD& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_USECARD* internal_default_instance() {
    return reinterpret_cast<const S_USECARD*>(
               &_S_USECARD_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(S_USECARD& a, S_USECARD& b) {
    a.Swap(&b);
  }
  inline void Swap(S_USECARD* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_USECARD* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_USECARD* New() const final {
    return new S_USECARD();
  }

  S_USECARD* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_USECARD>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_USECARD& from);
  void MergeFrom(const S_USECARD& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_USECARD* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.S_USECARD";
  }
  protected:
  explicit S_USECARD(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsedCardNumFieldNumber = 1,
    kTargetEnemyNumFieldNumber = 2,
  };
  // int32 usedCardNum = 1;
  void clear_usedcardnum();
  ::PROTOBUF_NAMESPACE_ID::int32 usedcardnum() const;
  void set_usedcardnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_usedcardnum() const;
  void _internal_set_usedcardnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 targetEnemyNum = 2;
  void clear_targetenemynum();
  ::PROTOBUF_NAMESPACE_ID::int32 targetenemynum() const;
  void set_targetenemynum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_targetenemynum() const;
  void _internal_set_targetenemynum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.S_USECARD)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 usedcardnum_;
  ::PROTOBUF_NAMESPACE_ID::int32 targetenemynum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class C_USECARD final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.C_USECARD) */ {
 public:
  inline C_USECARD() : C_USECARD(nullptr) {}
  ~C_USECARD() override;
  explicit constexpr C_USECARD(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_USECARD(const C_USECARD& from);
  C_USECARD(C_USECARD&& from) noexcept
    : C_USECARD() {
    *this = ::std::move(from);
  }

  inline C_USECARD& operator=(const C_USECARD& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_USECARD& operator=(C_USECARD&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_USECARD& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_USECARD* internal_default_instance() {
    return reinterpret_cast<const C_USECARD*>(
               &_C_USECARD_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(C_USECARD& a, C_USECARD& b) {
    a.Swap(&b);
  }
  inline void Swap(C_USECARD* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_USECARD* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_USECARD* New() const final {
    return new C_USECARD();
  }

  C_USECARD* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_USECARD>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_USECARD& from);
  void MergeFrom(const C_USECARD& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_USECARD* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.C_USECARD";
  }
  protected:
  explicit C_USECARD(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsedCardNumFieldNumber = 1,
    kTargetEnemyNumFieldNumber = 2,
  };
  // int32 usedCardNum = 1;
  void clear_usedcardnum();
  ::PROTOBUF_NAMESPACE_ID::int32 usedcardnum() const;
  void set_usedcardnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_usedcardnum() const;
  void _internal_set_usedcardnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 targetEnemyNum = 2;
  void clear_targetenemynum();
  ::PROTOBUF_NAMESPACE_ID::int32 targetenemynum() const;
  void set_targetenemynum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_targetenemynum() const;
  void _internal_set_targetenemynum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.C_USECARD)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 usedcardnum_;
  ::PROTOBUF_NAMESPACE_ID::int32 targetenemynum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class S_TURNEND final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.S_TURNEND) */ {
 public:
  inline S_TURNEND() : S_TURNEND(nullptr) {}
  ~S_TURNEND() override;
  explicit constexpr S_TURNEND(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_TURNEND(const S_TURNEND& from);
  S_TURNEND(S_TURNEND&& from) noexcept
    : S_TURNEND() {
    *this = ::std::move(from);
  }

  inline S_TURNEND& operator=(const S_TURNEND& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_TURNEND& operator=(S_TURNEND&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_TURNEND& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_TURNEND* internal_default_instance() {
    return reinterpret_cast<const S_TURNEND*>(
               &_S_TURNEND_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(S_TURNEND& a, S_TURNEND& b) {
    a.Swap(&b);
  }
  inline void Swap(S_TURNEND* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_TURNEND* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_TURNEND* New() const final {
    return new S_TURNEND();
  }

  S_TURNEND* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_TURNEND>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_TURNEND& from);
  void MergeFrom(const S_TURNEND& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_TURNEND* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.S_TURNEND";
  }
  protected:
  explicit S_TURNEND(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBTurnEndFieldNumber = 1,
  };
  // bool bTurnEnd = 1;
  void clear_bturnend();
  bool bturnend() const;
  void set_bturnend(bool value);
  private:
  bool _internal_bturnend() const;
  void _internal_set_bturnend(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.S_TURNEND)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool bturnend_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class C_TURNEND final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.C_TURNEND) */ {
 public:
  inline C_TURNEND() : C_TURNEND(nullptr) {}
  ~C_TURNEND() override;
  explicit constexpr C_TURNEND(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_TURNEND(const C_TURNEND& from);
  C_TURNEND(C_TURNEND&& from) noexcept
    : C_TURNEND() {
    *this = ::std::move(from);
  }

  inline C_TURNEND& operator=(const C_TURNEND& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_TURNEND& operator=(C_TURNEND&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_TURNEND& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_TURNEND* internal_default_instance() {
    return reinterpret_cast<const C_TURNEND*>(
               &_C_TURNEND_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(C_TURNEND& a, C_TURNEND& b) {
    a.Swap(&b);
  }
  inline void Swap(C_TURNEND* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_TURNEND* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_TURNEND* New() const final {
    return new C_TURNEND();
  }

  C_TURNEND* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_TURNEND>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_TURNEND& from);
  void MergeFrom(const C_TURNEND& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_TURNEND* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.C_TURNEND";
  }
  protected:
  explicit C_TURNEND(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBTurnEndFieldNumber = 1,
  };
  // bool bTurnEnd = 1;
  void clear_bturnend();
  bool bturnend() const;
  void set_bturnend(bool value);
  private:
  bool _internal_bturnend() const;
  void _internal_set_bturnend(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.C_TURNEND)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool bturnend_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// S_CONNECT

// bool connect = 1;
inline void S_CONNECT::clear_connect() {
  connect_ = false;
}
inline bool S_CONNECT::_internal_connect() const {
  return connect_;
}
inline bool S_CONNECT::connect() const {
  // @@protoc_insertion_point(field_get:protocol.S_CONNECT.connect)
  return _internal_connect();
}
inline void S_CONNECT::_internal_set_connect(bool value) {
  
  connect_ = value;
}
inline void S_CONNECT::set_connect(bool value) {
  _internal_set_connect(value);
  // @@protoc_insertion_point(field_set:protocol.S_CONNECT.connect)
}

// -------------------------------------------------------------------

// C_CONNECT

// bool connect = 1;
inline void C_CONNECT::clear_connect() {
  connect_ = false;
}
inline bool C_CONNECT::_internal_connect() const {
  return connect_;
}
inline bool C_CONNECT::connect() const {
  // @@protoc_insertion_point(field_get:protocol.C_CONNECT.connect)
  return _internal_connect();
}
inline void C_CONNECT::_internal_set_connect(bool value) {
  
  connect_ = value;
}
inline void C_CONNECT::set_connect(bool value) {
  _internal_set_connect(value);
  // @@protoc_insertion_point(field_set:protocol.C_CONNECT.connect)
}

// -------------------------------------------------------------------

// S_USECARD

// int32 usedCardNum = 1;
inline void S_USECARD::clear_usedcardnum() {
  usedcardnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_USECARD::_internal_usedcardnum() const {
  return usedcardnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_USECARD::usedcardnum() const {
  // @@protoc_insertion_point(field_get:protocol.S_USECARD.usedCardNum)
  return _internal_usedcardnum();
}
inline void S_USECARD::_internal_set_usedcardnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  usedcardnum_ = value;
}
inline void S_USECARD::set_usedcardnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_usedcardnum(value);
  // @@protoc_insertion_point(field_set:protocol.S_USECARD.usedCardNum)
}

// int32 targetEnemyNum = 2;
inline void S_USECARD::clear_targetenemynum() {
  targetenemynum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_USECARD::_internal_targetenemynum() const {
  return targetenemynum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_USECARD::targetenemynum() const {
  // @@protoc_insertion_point(field_get:protocol.S_USECARD.targetEnemyNum)
  return _internal_targetenemynum();
}
inline void S_USECARD::_internal_set_targetenemynum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  targetenemynum_ = value;
}
inline void S_USECARD::set_targetenemynum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_targetenemynum(value);
  // @@protoc_insertion_point(field_set:protocol.S_USECARD.targetEnemyNum)
}

// -------------------------------------------------------------------

// C_USECARD

// int32 usedCardNum = 1;
inline void C_USECARD::clear_usedcardnum() {
  usedcardnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C_USECARD::_internal_usedcardnum() const {
  return usedcardnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C_USECARD::usedcardnum() const {
  // @@protoc_insertion_point(field_get:protocol.C_USECARD.usedCardNum)
  return _internal_usedcardnum();
}
inline void C_USECARD::_internal_set_usedcardnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  usedcardnum_ = value;
}
inline void C_USECARD::set_usedcardnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_usedcardnum(value);
  // @@protoc_insertion_point(field_set:protocol.C_USECARD.usedCardNum)
}

// int32 targetEnemyNum = 2;
inline void C_USECARD::clear_targetenemynum() {
  targetenemynum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C_USECARD::_internal_targetenemynum() const {
  return targetenemynum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C_USECARD::targetenemynum() const {
  // @@protoc_insertion_point(field_get:protocol.C_USECARD.targetEnemyNum)
  return _internal_targetenemynum();
}
inline void C_USECARD::_internal_set_targetenemynum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  targetenemynum_ = value;
}
inline void C_USECARD::set_targetenemynum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_targetenemynum(value);
  // @@protoc_insertion_point(field_set:protocol.C_USECARD.targetEnemyNum)
}

// -------------------------------------------------------------------

// S_TURNEND

// bool bTurnEnd = 1;
inline void S_TURNEND::clear_bturnend() {
  bturnend_ = false;
}
inline bool S_TURNEND::_internal_bturnend() const {
  return bturnend_;
}
inline bool S_TURNEND::bturnend() const {
  // @@protoc_insertion_point(field_get:protocol.S_TURNEND.bTurnEnd)
  return _internal_bturnend();
}
inline void S_TURNEND::_internal_set_bturnend(bool value) {
  
  bturnend_ = value;
}
inline void S_TURNEND::set_bturnend(bool value) {
  _internal_set_bturnend(value);
  // @@protoc_insertion_point(field_set:protocol.S_TURNEND.bTurnEnd)
}

// -------------------------------------------------------------------

// C_TURNEND

// bool bTurnEnd = 1;
inline void C_TURNEND::clear_bturnend() {
  bturnend_ = false;
}
inline bool C_TURNEND::_internal_bturnend() const {
  return bturnend_;
}
inline bool C_TURNEND::bturnend() const {
  // @@protoc_insertion_point(field_get:protocol.C_TURNEND.bTurnEnd)
  return _internal_bturnend();
}
inline void C_TURNEND::_internal_set_bturnend(bool value) {
  
  bturnend_ = value;
}
inline void C_TURNEND::set_bturnend(bool value) {
  _internal_set_bturnend(value);
  // @@protoc_insertion_point(field_set:protocol.C_TURNEND.bTurnEnd)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto
