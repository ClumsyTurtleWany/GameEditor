syntax = "proto3";
package protocol;

import "enum.proto";
import "struct.proto";

message C_TEST
{
	uint64 id = 1;
}

message C_MOVE
{
	uint64 id = 1;
	uint64 pos = 2;
}

message S_TEST
{
	uint64 id = 1;
	uint32 hp = 2;
	uint32 attack = 3;
	//반복이 필요할 때
	repeated BuffData buffs =4;


	// 비 효율적, 실수 여지 많음 
	// 혹여 PACKET_ID가 다른 message에서 겹칠 경우 컴파일러가 체크 해주지 않으니 꼬일 가능성 존재
	// 따라서 자동화를 해서 처리하는게 깔끔
	//enum PacketId { NONE = 0; PACKET_ID = 1; }
}

message S_LOGIN
{
	//비 효율적, 실수 여지 많음 
	//enum PacketId { NONE = 0; PACKET_ID = 2;}
}