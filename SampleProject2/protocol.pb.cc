// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto

#include "protocol.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace protocol {
constexpr S_CONNECT::S_CONNECT(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : connect_(false){}
struct S_CONNECTDefaultTypeInternal {
  constexpr S_CONNECTDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_CONNECTDefaultTypeInternal() {}
  union {
    S_CONNECT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_CONNECTDefaultTypeInternal _S_CONNECT_default_instance_;
constexpr C_CONNECT::C_CONNECT(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : connect_(false){}
struct C_CONNECTDefaultTypeInternal {
  constexpr C_CONNECTDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_CONNECTDefaultTypeInternal() {}
  union {
    C_CONNECT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_CONNECTDefaultTypeInternal _C_CONNECT_default_instance_;
constexpr S_USECARD::S_USECARD(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : usedcardnum_(0)
  , targetenemynum_(0){}
struct S_USECARDDefaultTypeInternal {
  constexpr S_USECARDDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_USECARDDefaultTypeInternal() {}
  union {
    S_USECARD _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_USECARDDefaultTypeInternal _S_USECARD_default_instance_;
constexpr C_USECARD::C_USECARD(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : usedcardnum_(0)
  , targetenemynum_(0){}
struct C_USECARDDefaultTypeInternal {
  constexpr C_USECARDDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_USECARDDefaultTypeInternal() {}
  union {
    C_USECARD _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_USECARDDefaultTypeInternal _C_USECARD_default_instance_;
constexpr S_TURNEND::S_TURNEND(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bturnend_(false){}
struct S_TURNENDDefaultTypeInternal {
  constexpr S_TURNENDDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_TURNENDDefaultTypeInternal() {}
  union {
    S_TURNEND _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_TURNENDDefaultTypeInternal _S_TURNEND_default_instance_;
constexpr C_TURNEND::C_TURNEND(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bturnend_(false){}
struct C_TURNENDDefaultTypeInternal {
  constexpr C_TURNENDDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_TURNENDDefaultTypeInternal() {}
  union {
    C_TURNEND _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_TURNENDDefaultTypeInternal _C_TURNEND_default_instance_;
}  // namespace protocol
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_protocol_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_protocol_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_protocol_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_protocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::S_CONNECT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::S_CONNECT, connect_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::C_CONNECT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::C_CONNECT, connect_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::S_USECARD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::S_USECARD, usedcardnum_),
  PROTOBUF_FIELD_OFFSET(::protocol::S_USECARD, targetenemynum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::C_USECARD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::C_USECARD, usedcardnum_),
  PROTOBUF_FIELD_OFFSET(::protocol::C_USECARD, targetenemynum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::S_TURNEND, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::S_TURNEND, bturnend_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::C_TURNEND, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::C_TURNEND, bturnend_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::protocol::S_CONNECT)},
  { 6, -1, sizeof(::protocol::C_CONNECT)},
  { 12, -1, sizeof(::protocol::S_USECARD)},
  { 19, -1, sizeof(::protocol::C_USECARD)},
  { 26, -1, sizeof(::protocol::S_TURNEND)},
  { 32, -1, sizeof(::protocol::C_TURNEND)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_S_CONNECT_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_C_CONNECT_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_S_USECARD_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_C_USECARD_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_S_TURNEND_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_C_TURNEND_default_instance_),
};

const char descriptor_table_protodef_protocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016protocol.proto\022\010protocol\032\nenum.proto\032\014"
  "struct.proto\"\034\n\tS_CONNECT\022\017\n\007connect\030\001 \001"
  "(\010\"\034\n\tC_CONNECT\022\017\n\007connect\030\001 \001(\010\"8\n\tS_US"
  "ECARD\022\023\n\013usedCardNum\030\001 \001(\005\022\026\n\016targetEnem"
  "yNum\030\002 \001(\005\"8\n\tC_USECARD\022\023\n\013usedCardNum\030\001"
  " \001(\005\022\026\n\016targetEnemyNum\030\002 \001(\005\"\035\n\tS_TURNEN"
  "D\022\020\n\010bTurnEnd\030\001 \001(\010\"\035\n\tC_TURNEND\022\020\n\010bTur"
  "nEnd\030\001 \001(\010b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_protocol_2eproto_deps[2] = {
  &::descriptor_table_enum_2eproto,
  &::descriptor_table_struct_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_protocol_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protocol_2eproto = {
  false, false, 298, descriptor_table_protodef_protocol_2eproto, "protocol.proto", 
  &descriptor_table_protocol_2eproto_once, descriptor_table_protocol_2eproto_deps, 2, 6,
  schemas, file_default_instances, TableStruct_protocol_2eproto::offsets,
  file_level_metadata_protocol_2eproto, file_level_enum_descriptors_protocol_2eproto, file_level_service_descriptors_protocol_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_protocol_2eproto_getter() {
  return &descriptor_table_protocol_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_protocol_2eproto(&descriptor_table_protocol_2eproto);
namespace protocol {

// ===================================================================

class S_CONNECT::_Internal {
 public:
};

S_CONNECT::S_CONNECT(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.S_CONNECT)
}
S_CONNECT::S_CONNECT(const S_CONNECT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  connect_ = from.connect_;
  // @@protoc_insertion_point(copy_constructor:protocol.S_CONNECT)
}

void S_CONNECT::SharedCtor() {
connect_ = false;
}

S_CONNECT::~S_CONNECT() {
  // @@protoc_insertion_point(destructor:protocol.S_CONNECT)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_CONNECT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_CONNECT::ArenaDtor(void* object) {
  S_CONNECT* _this = reinterpret_cast< S_CONNECT* >(object);
  (void)_this;
}
void S_CONNECT::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_CONNECT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_CONNECT::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.S_CONNECT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  connect_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_CONNECT::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool connect = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          connect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_CONNECT::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.S_CONNECT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool connect = 1;
  if (this->connect() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_connect(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.S_CONNECT)
  return target;
}

size_t S_CONNECT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.S_CONNECT)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool connect = 1;
  if (this->connect() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_CONNECT::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.S_CONNECT)
  GOOGLE_DCHECK_NE(&from, this);
  const S_CONNECT* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_CONNECT>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.S_CONNECT)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.S_CONNECT)
    MergeFrom(*source);
  }
}

void S_CONNECT::MergeFrom(const S_CONNECT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.S_CONNECT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.connect() != 0) {
    _internal_set_connect(from._internal_connect());
  }
}

void S_CONNECT::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.S_CONNECT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_CONNECT::CopyFrom(const S_CONNECT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.S_CONNECT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_CONNECT::IsInitialized() const {
  return true;
}

void S_CONNECT::InternalSwap(S_CONNECT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(connect_, other->connect_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_CONNECT::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_protocol_2eproto_getter, &descriptor_table_protocol_2eproto_once,
      file_level_metadata_protocol_2eproto[0]);
}

// ===================================================================

class C_CONNECT::_Internal {
 public:
};

C_CONNECT::C_CONNECT(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.C_CONNECT)
}
C_CONNECT::C_CONNECT(const C_CONNECT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  connect_ = from.connect_;
  // @@protoc_insertion_point(copy_constructor:protocol.C_CONNECT)
}

void C_CONNECT::SharedCtor() {
connect_ = false;
}

C_CONNECT::~C_CONNECT() {
  // @@protoc_insertion_point(destructor:protocol.C_CONNECT)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C_CONNECT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_CONNECT::ArenaDtor(void* object) {
  C_CONNECT* _this = reinterpret_cast< C_CONNECT* >(object);
  (void)_this;
}
void C_CONNECT::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_CONNECT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_CONNECT::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.C_CONNECT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  connect_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_CONNECT::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool connect = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          connect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C_CONNECT::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.C_CONNECT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool connect = 1;
  if (this->connect() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_connect(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.C_CONNECT)
  return target;
}

size_t C_CONNECT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.C_CONNECT)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool connect = 1;
  if (this->connect() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C_CONNECT::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.C_CONNECT)
  GOOGLE_DCHECK_NE(&from, this);
  const C_CONNECT* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C_CONNECT>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.C_CONNECT)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.C_CONNECT)
    MergeFrom(*source);
  }
}

void C_CONNECT::MergeFrom(const C_CONNECT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.C_CONNECT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.connect() != 0) {
    _internal_set_connect(from._internal_connect());
  }
}

void C_CONNECT::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.C_CONNECT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_CONNECT::CopyFrom(const C_CONNECT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.C_CONNECT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_CONNECT::IsInitialized() const {
  return true;
}

void C_CONNECT::InternalSwap(C_CONNECT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(connect_, other->connect_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_CONNECT::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_protocol_2eproto_getter, &descriptor_table_protocol_2eproto_once,
      file_level_metadata_protocol_2eproto[1]);
}

// ===================================================================

class S_USECARD::_Internal {
 public:
};

S_USECARD::S_USECARD(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.S_USECARD)
}
S_USECARD::S_USECARD(const S_USECARD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&usedcardnum_, &from.usedcardnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&targetenemynum_) -
    reinterpret_cast<char*>(&usedcardnum_)) + sizeof(targetenemynum_));
  // @@protoc_insertion_point(copy_constructor:protocol.S_USECARD)
}

void S_USECARD::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&usedcardnum_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&targetenemynum_) -
    reinterpret_cast<char*>(&usedcardnum_)) + sizeof(targetenemynum_));
}

S_USECARD::~S_USECARD() {
  // @@protoc_insertion_point(destructor:protocol.S_USECARD)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_USECARD::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_USECARD::ArenaDtor(void* object) {
  S_USECARD* _this = reinterpret_cast< S_USECARD* >(object);
  (void)_this;
}
void S_USECARD::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_USECARD::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_USECARD::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.S_USECARD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&usedcardnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&targetenemynum_) -
      reinterpret_cast<char*>(&usedcardnum_)) + sizeof(targetenemynum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_USECARD::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 usedCardNum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          usedcardnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 targetEnemyNum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          targetenemynum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_USECARD::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.S_USECARD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 usedCardNum = 1;
  if (this->usedcardnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_usedcardnum(), target);
  }

  // int32 targetEnemyNum = 2;
  if (this->targetenemynum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_targetenemynum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.S_USECARD)
  return target;
}

size_t S_USECARD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.S_USECARD)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 usedCardNum = 1;
  if (this->usedcardnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_usedcardnum());
  }

  // int32 targetEnemyNum = 2;
  if (this->targetenemynum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_targetenemynum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_USECARD::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.S_USECARD)
  GOOGLE_DCHECK_NE(&from, this);
  const S_USECARD* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_USECARD>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.S_USECARD)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.S_USECARD)
    MergeFrom(*source);
  }
}

void S_USECARD::MergeFrom(const S_USECARD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.S_USECARD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.usedcardnum() != 0) {
    _internal_set_usedcardnum(from._internal_usedcardnum());
  }
  if (from.targetenemynum() != 0) {
    _internal_set_targetenemynum(from._internal_targetenemynum());
  }
}

void S_USECARD::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.S_USECARD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_USECARD::CopyFrom(const S_USECARD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.S_USECARD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_USECARD::IsInitialized() const {
  return true;
}

void S_USECARD::InternalSwap(S_USECARD* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_USECARD, targetenemynum_)
      + sizeof(S_USECARD::targetenemynum_)
      - PROTOBUF_FIELD_OFFSET(S_USECARD, usedcardnum_)>(
          reinterpret_cast<char*>(&usedcardnum_),
          reinterpret_cast<char*>(&other->usedcardnum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_USECARD::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_protocol_2eproto_getter, &descriptor_table_protocol_2eproto_once,
      file_level_metadata_protocol_2eproto[2]);
}

// ===================================================================

class C_USECARD::_Internal {
 public:
};

C_USECARD::C_USECARD(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.C_USECARD)
}
C_USECARD::C_USECARD(const C_USECARD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&usedcardnum_, &from.usedcardnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&targetenemynum_) -
    reinterpret_cast<char*>(&usedcardnum_)) + sizeof(targetenemynum_));
  // @@protoc_insertion_point(copy_constructor:protocol.C_USECARD)
}

void C_USECARD::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&usedcardnum_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&targetenemynum_) -
    reinterpret_cast<char*>(&usedcardnum_)) + sizeof(targetenemynum_));
}

C_USECARD::~C_USECARD() {
  // @@protoc_insertion_point(destructor:protocol.C_USECARD)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C_USECARD::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_USECARD::ArenaDtor(void* object) {
  C_USECARD* _this = reinterpret_cast< C_USECARD* >(object);
  (void)_this;
}
void C_USECARD::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_USECARD::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_USECARD::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.C_USECARD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&usedcardnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&targetenemynum_) -
      reinterpret_cast<char*>(&usedcardnum_)) + sizeof(targetenemynum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_USECARD::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 usedCardNum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          usedcardnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 targetEnemyNum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          targetenemynum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C_USECARD::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.C_USECARD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 usedCardNum = 1;
  if (this->usedcardnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_usedcardnum(), target);
  }

  // int32 targetEnemyNum = 2;
  if (this->targetenemynum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_targetenemynum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.C_USECARD)
  return target;
}

size_t C_USECARD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.C_USECARD)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 usedCardNum = 1;
  if (this->usedcardnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_usedcardnum());
  }

  // int32 targetEnemyNum = 2;
  if (this->targetenemynum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_targetenemynum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C_USECARD::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.C_USECARD)
  GOOGLE_DCHECK_NE(&from, this);
  const C_USECARD* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C_USECARD>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.C_USECARD)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.C_USECARD)
    MergeFrom(*source);
  }
}

void C_USECARD::MergeFrom(const C_USECARD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.C_USECARD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.usedcardnum() != 0) {
    _internal_set_usedcardnum(from._internal_usedcardnum());
  }
  if (from.targetenemynum() != 0) {
    _internal_set_targetenemynum(from._internal_targetenemynum());
  }
}

void C_USECARD::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.C_USECARD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_USECARD::CopyFrom(const C_USECARD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.C_USECARD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_USECARD::IsInitialized() const {
  return true;
}

void C_USECARD::InternalSwap(C_USECARD* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_USECARD, targetenemynum_)
      + sizeof(C_USECARD::targetenemynum_)
      - PROTOBUF_FIELD_OFFSET(C_USECARD, usedcardnum_)>(
          reinterpret_cast<char*>(&usedcardnum_),
          reinterpret_cast<char*>(&other->usedcardnum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_USECARD::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_protocol_2eproto_getter, &descriptor_table_protocol_2eproto_once,
      file_level_metadata_protocol_2eproto[3]);
}

// ===================================================================

class S_TURNEND::_Internal {
 public:
};

S_TURNEND::S_TURNEND(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.S_TURNEND)
}
S_TURNEND::S_TURNEND(const S_TURNEND& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bturnend_ = from.bturnend_;
  // @@protoc_insertion_point(copy_constructor:protocol.S_TURNEND)
}

void S_TURNEND::SharedCtor() {
bturnend_ = false;
}

S_TURNEND::~S_TURNEND() {
  // @@protoc_insertion_point(destructor:protocol.S_TURNEND)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_TURNEND::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_TURNEND::ArenaDtor(void* object) {
  S_TURNEND* _this = reinterpret_cast< S_TURNEND* >(object);
  (void)_this;
}
void S_TURNEND::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_TURNEND::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_TURNEND::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.S_TURNEND)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bturnend_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_TURNEND::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool bTurnEnd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          bturnend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_TURNEND::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.S_TURNEND)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool bTurnEnd = 1;
  if (this->bturnend() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bturnend(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.S_TURNEND)
  return target;
}

size_t S_TURNEND::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.S_TURNEND)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool bTurnEnd = 1;
  if (this->bturnend() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_TURNEND::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.S_TURNEND)
  GOOGLE_DCHECK_NE(&from, this);
  const S_TURNEND* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_TURNEND>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.S_TURNEND)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.S_TURNEND)
    MergeFrom(*source);
  }
}

void S_TURNEND::MergeFrom(const S_TURNEND& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.S_TURNEND)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bturnend() != 0) {
    _internal_set_bturnend(from._internal_bturnend());
  }
}

void S_TURNEND::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.S_TURNEND)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_TURNEND::CopyFrom(const S_TURNEND& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.S_TURNEND)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_TURNEND::IsInitialized() const {
  return true;
}

void S_TURNEND::InternalSwap(S_TURNEND* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(bturnend_, other->bturnend_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_TURNEND::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_protocol_2eproto_getter, &descriptor_table_protocol_2eproto_once,
      file_level_metadata_protocol_2eproto[4]);
}

// ===================================================================

class C_TURNEND::_Internal {
 public:
};

C_TURNEND::C_TURNEND(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.C_TURNEND)
}
C_TURNEND::C_TURNEND(const C_TURNEND& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bturnend_ = from.bturnend_;
  // @@protoc_insertion_point(copy_constructor:protocol.C_TURNEND)
}

void C_TURNEND::SharedCtor() {
bturnend_ = false;
}

C_TURNEND::~C_TURNEND() {
  // @@protoc_insertion_point(destructor:protocol.C_TURNEND)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C_TURNEND::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_TURNEND::ArenaDtor(void* object) {
  C_TURNEND* _this = reinterpret_cast< C_TURNEND* >(object);
  (void)_this;
}
void C_TURNEND::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_TURNEND::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_TURNEND::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.C_TURNEND)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bturnend_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_TURNEND::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool bTurnEnd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          bturnend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C_TURNEND::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.C_TURNEND)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool bTurnEnd = 1;
  if (this->bturnend() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bturnend(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.C_TURNEND)
  return target;
}

size_t C_TURNEND::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.C_TURNEND)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool bTurnEnd = 1;
  if (this->bturnend() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C_TURNEND::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.C_TURNEND)
  GOOGLE_DCHECK_NE(&from, this);
  const C_TURNEND* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C_TURNEND>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.C_TURNEND)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.C_TURNEND)
    MergeFrom(*source);
  }
}

void C_TURNEND::MergeFrom(const C_TURNEND& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.C_TURNEND)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bturnend() != 0) {
    _internal_set_bturnend(from._internal_bturnend());
  }
}

void C_TURNEND::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.C_TURNEND)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_TURNEND::CopyFrom(const C_TURNEND& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.C_TURNEND)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_TURNEND::IsInitialized() const {
  return true;
}

void C_TURNEND::InternalSwap(C_TURNEND* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(bturnend_, other->bturnend_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_TURNEND::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_protocol_2eproto_getter, &descriptor_table_protocol_2eproto_once,
      file_level_metadata_protocol_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protocol::S_CONNECT* Arena::CreateMaybeMessage< ::protocol::S_CONNECT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::S_CONNECT >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::C_CONNECT* Arena::CreateMaybeMessage< ::protocol::C_CONNECT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::C_CONNECT >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::S_USECARD* Arena::CreateMaybeMessage< ::protocol::S_USECARD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::S_USECARD >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::C_USECARD* Arena::CreateMaybeMessage< ::protocol::C_USECARD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::C_USECARD >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::S_TURNEND* Arena::CreateMaybeMessage< ::protocol::S_TURNEND >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::S_TURNEND >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::C_TURNEND* Arena::CreateMaybeMessage< ::protocol::C_TURNEND >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::C_TURNEND >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
